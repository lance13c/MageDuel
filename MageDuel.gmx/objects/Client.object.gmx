<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting Up Client
clientx = room_width*(4/5); // Not important
clienty = room_height*(1/5);// Not important

//LOCAL PLAYER ATTRIBUTES:
localPlayerName = "";


// The main partical system
system = part_system_create();


//Spells Known to Player
spellsKnown[0] = "";
spellsKnown[1] = "";
spellsKnown[2] = "";

// Lists of all particals for each spell
partsForSpells = ds_map_create(); // Gets filled with initSpells()

// Key Maps
keyActions = ds_list_create(); // The keys to the key maps
keys_default_map = ds_map_create();
keys_primary_map = ds_map_create();
keys_secondary_map = ds_map_create();

//Transfer Local Data to Client
// Init all spells
with(LocalData){
    other.localPlayerName = self.localPlayerName[0];
    other.spellsKnown[0] = self.spellsKnown[0];
    other.spellsKnown[1] = self.spellsKnown[1];
    other.spellsKnown[2] = self.spellsKnown[2];
    initSpells(); // Initializes all spells, let client know all particals
    
    other.keyActions = self.keyActions;
    other.keys_default_map = self.keys_default_map;
    other.keys_primary_map = self.keys_primary_map;
    other.keys_secondary_map = self.keys_secondary_map;
}


// This tells whether the current spell is initialized
//     Using the spellname_create script
initSpell = false; 

activeSpellIndex = 0;
activeSpell = spellsKnown[activeSpellIndex];
maxSpells = 3;

playerX = 0;
playerY = 0;

playerSpriteIndex = -1;
playerImageIndex = -1;
playerImageBlend = -1;



localMana = 100; // Magic Power
manaRegen = 5;
playerSpeed = _Player_Movement_Speed;



localPlayerID = -1; // Not Assigned - Get this in setup



// Network Messages
buff = buffer_create(1024, buffer_grow, 1);

//Client Socket
client = network_create_socket(global.ServerType);

global.client = client;
global.NetworkState = NETWORK_PLAY;

playerDataR = ds_list_create(); // The Player Data Recieved
spellDataR = ds_list_create(); // The Spell Data Recieved
playerDataRSetup = ds_list_create(); // Setup Data for the local Player, received by server
playerDataS = ds_list_create(); // The Player Data to Send

// Connect to Server
var err = network_connect(client, global.connectip,6510);
if (err != 0){
    // Can't connect show error message
    show_message("Error: can not connect to server!");
    game_restart();
}

// Send spellsKnown to server
network_SendSpellList();

// Client has connected to the server, now send "player_name";
network_SendName( localPlayerName );
alarm[0] = 120;

/*
data = ds_list_create();

client = network_create_socket(network_socket_tcp);
buff = buffer_create( 256, buffer_grow, 1);

buffer_seek(buff, buffer_seek_start, 0);
buffer_write(buff, buffer_s16, 3);
network_send_packet( client, buff, buffer_tell(buff));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send "ping" to tell the Server - still here -
alarm[0] = 120;
network_SendStillAlive();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>network_ClientSendInfo</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>network_ClientRecievedData</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing Network Players

// set the X and Y of the client, makes room follow player
//x = clientx;
//y = clienty;

// Now loop through all active sprites and draw them
// If this is server, do not draw, Draw only when we know have the playerID;
if (!global.haveserver &amp;&amp; localPlayerID != -1){    
    if (!ds_list_empty(playerDataR)){
        // Get the player data and draw
        draw_player(playerDataR);
        /// Drawing the Spell Particals
        draw_spell();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>2,2</point>
  </PhysicsShapePoints>
</object>
