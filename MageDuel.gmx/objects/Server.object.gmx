<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Up Server

global.PlayerTotal = 0;
global.haveServer = true;

broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
Clients = ds_map_create();
socketlist = ds_list_create();


server = network_create_server( network_socket_tcp, 6510, 32);
if (server &lt; 0){
    // If theres already a server running, shut down and delete.
    global.haveserver = false;
    ds_map_destroy(Clients);
    ds_list_destroy(socketlist);
    buffer_delete(broadcast_buffer);
    buffer_delete(player_buffer);
    instance_destroy();
}

// Broadcast Timmer
alarm[0] = 60;



//client = network_create_socket( network_socket_tcp);
//clients = ds_map_create();
//network_connect( client, "127.0.0.1", 6510);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location to potental Clients

buffer_seek( broadcast_buffer, buffer_seek_start, 0);
buffer_write (broadcast_buffer, buffer_string, global.ServerName);
network_send_broadcast( server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer));

// Broadcast once a second
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send player data to All attached clients

//Every Frame
var count = ds_list_size(socketlist);
if (count &gt; 0){
    
    global.player_buffer = player_buffer;
    
    buffer_seek(player_buffer, buffer_seek_start, 0);
    
    buffer_write(player_buffer, buffer_u32, global.PlayerTotal);
    
    buffer_write(global.player_buffer, buffer_s16, 0);
    buffer_write(global.player_buffer, buffer_s16, 0);
    
    
    // All active Players
    with(Player){
        buffer_write(global.player_buffer, buffer_s16, x);
        buffer_write(global.player_buffer, buffer_s16, y);
        buffer_write(global.player_buffer, buffer_s16, sprite_index);
        buffer_write(global.player_buffer, buffer_s16, image_index);
        buffer_write(global.player_buffer, buffer_s32, image_blend);
        buffer_write(global.player_buffer, buffer_string, PlayerName);
    }
    
    var buffer_size = buffer_tell(player_buffer);
    
    //Send data to clients
    
    for(i=0;i&lt;count;i++){
        // get socket
        var sock = ds_list_find_value(socketlist,i);
        
        // Write in client location
        buffer_seek(player_buffer, buffer_seek_start, 4);
        
        // Get the player's instance
        var inst = ds_map_find_value(Clients, sock);
        buffer_write(global.player_buffer, buffer_s16, inst.x);
        buffer_write(global.player_buffer, buffer_s16, inst.y);
        
        // Send Data
        network_send_packet( sock, player_buffer, buffer_size);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Network Control

var eventid = ds_map_find_value(async_load, "id");

if (server == eventid){
    // Means client is connecting or disconnecting
    network_ConnectDisconnect();
}else if( eventid == global.client){
    // Do nother if this is for our "local client"
}else{
    // Add other clients
    network_ServerRecievedData();
}
/*
var t = ds_map_find_value(async_load, "type");
if (t == network_type_connect){
    var sock = ds_map_find_value(async_load, "socket");
    var ip = ds_map_find_value(async_load, "ip");
    var inst = instance_create(room_width*(4/5),room_height*(1/5),PlayerNetwork); // Refactor Later
    ds_map_add( clients, sock, inst);
}
if (t == network_type_data){
    var buff = ds_map_find_value(async_load, "buffer");
    var sock = ds_map_find_value(async_load, "id");
    var inst = ds_map_find_value( clients, sock);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
