<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting Up Client
clientx = room_width*(4/5);
clienty = room_height*(1/5);
PlayerName = global.ServerName;
global.PlayerSetupInfo[0,0] = 0; // Represents the information of player 0, info at zero

// Network Messages
buff = buffer_create(256, buffer_grow, 1);

//Client Socket
client = network_create_socket(global.ServerType);

global.client = client;

global.NetworkState = NETWORK_PLAY;

allsprites = ds_list_create();
sprites = 0;

// Connect to Server
var err = network_connect(client, global.connectip,6510);
if (err != 0){
    // Can't connect show error message
    show_message("Error: can not connect to server!");
    game_restart();
}

// Client has connected to the server, now send "player_name";
network_SendName( PlayerName );
alarm[0] = 120;

/*
data = ds_list_create();

client = network_create_socket(network_socket_tcp);
buff = buffer_create( 256, buffer_grow, 1);

buffer_seek(buff, buffer_seek_start, 0);
buffer_write(buff, buffer_s16, 3);
network_send_packet( client, buff, buffer_tell(buff));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send "ping" to tell the Server - still here -
alarm[0] = 120;
network_SendStillAlive();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Player Inputs to Server

//Key Map these

// Jump
if (keyboard_check(ord('W')) || keyboard_check(ord('Space'))){
    network_SendKey(JUMP_KEY,KEY_DOWN);
}else{
    network_SendKey(JUMP_KEY,KEY_UP);
}

// Move Left
if (keyboard_check(ord('A'))){
    network_SendKey(LEFT_KEY,KEY_DOWN);
}else{
    network_SendKey(LEFT_KEY,KEY_UP);
}

// Move Right
if (keyboard_check(ord('D'))){
    network_SendKey(RIGHT_KEY,KEY_DOWN);
}else{
    network_SendKey(RIGHT_KEY,KEY_UP);
}

// Move Down
if (keyboard_check(ord('S'))){
    network_SendKey(DOWN_KEY,KEY_DOWN);
}else{
    network_SendKey(DOWN_KEY,KEY_UP);
}

// Mouse Press
if (device_mouse_check_button_pressed(0,mb_left)){
    network_SendMouseState(mb_left,MOUSE_PRESSED);
// Mouse Down
}else if (device_mouse_check_button(0,mb_left)){
    network_SendMouseState(mb_left,MOUSE_DOWN);
//Mouse Released
}else if (device_mouse_check_button_released(0,mb_left)){
    network_SendMouseState(mb_left,MOUSE_RELEASED);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Network Client Controls

var eventid = ds_map_find_value(async_load, "id");

// Check if the data is for this client
if (client == eventid){

    switch(global.NetworkState){
        
        case NETWORK_PLAY:
        {
            // Read all data...
            var buff = ds_map_find_value(async_load, "buffer");
            
            // Get number of sprites sent
            sprites = buffer_read(buff, buffer_u32);
            
            // Read out OUR location  (llow scrolling maps)
            clientx = buffer_read(buff, buffer_s16); // x
            clienty = buffer_read(buff, buffer_s16); // y
        
            
            // Clear list and add this client's information
            ds_list_clear(allsprites);
            
            for(var i=0;i&lt;sprites;i++){
                ds_list_add(allsprites, buffer_read(buff,buffer_s16)); //x
                ds_list_add(allsprites, buffer_read(buff,buffer_s16)); //y
                ds_list_add(allsprites, buffer_read(buff,buffer_s16)); //sprite_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s16)); //image_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s32)); //image_blend
                ds_list_add(allsprites, buffer_read(buff,buffer_string)); //player name
                ds_list_add(allsprites, buffer_read(buff,buffer_s16)); //playerID
            }
        } 
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing Network Players

// set the X and Y of the client, makes room follow player
x = clientx;
y = clienty;

var localPlayerID;
with (PlayerLocal){
    localPlayerID = self.playerID;
}

// Now loop through all active sprites and draw them
if (!ds_list_empty(allsprites)){
    var index = 0;
    for(i=0;i&lt;sprites;i++){
        var xx,yy,sp,spindex,col;
        
        xx = ds_list_find_value(allsprites,index++);
        yy = ds_list_find_value(allsprites,index++);
        sp = ds_list_find_value(allsprites,index++);
        spindex = ds_list_find_value(allsprites,index++);
        col = ds_list_find_value(allsprites,index++);
        name = ds_list_find_value(allsprites,index++);
        playerID = ds_list_find_value(allsprites,index++);
        
        // Don't draw self
        if (playerID != localPlayerID){ // Change this to playerNumber in future
            draw_sprite_ext(sp,spindex,xx,yy,1,1,0,col,1.0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>2,2</point>
  </PhysicsShapePoints>
</object>
